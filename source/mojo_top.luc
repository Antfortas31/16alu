module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],    // DIP switches on IO Shield
    //final outputs
    output out[16],
    output z,
    output v,
    output n
    
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
      edge_detector edge_detector(#RISE(1), #FALL(0));
      button_conditioner button_cond;
      edge_detector edge_detector2(#RISE(1),#FALL(0));
      button_conditioner button_cond2; 
      edge_detector edge_detector3(#RISE(1),#FALL(0));
      button_conditioner button_cond3;
      
      //////////////////////////////////////////////////////////////
      // put in any files here as [filename] [variable name]
      //////////////////////////////////////////////////////////
      adder adder; 
  }
  //creat a, b, control codes
  sig a[16];
  sig b[16];
  sig add[8];
  sig sub[8];
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    
    //buttons
    button_cond.in = io_button[3];
    edge_detector.in = button_cond.out;
    button_cond2.in = io_button[4];
    edge_detector2.in = button_cond2.out;
    button_cond3.in = io_button[1];
    edge_detector3.in = button_cond3.out;
    
    //default values
    a = 0;
    b = 0;
    out = 0;
    z = 0;
    v = 0;
    n = 0;
    
    //left button to set a
    if (edge_detector.out == 1){
      a[15:8] = io_dip[1];
      a[7:0] = io_dip[0];
      io_led[1] = a[15:8];
      io_led[0] = a[7:0];
    }
    
    //right button to set b
    if (edge_detector2.out == 1){
      b[15:8] = io_dip[1];
      b[7:0] = io_dip[0];
      io_led[1] = b[15:8];
      io_led[0] = b[7:0];
    }
    
    //center button & io_dip[2] to control which part of alu
    
    //control codes for adder
    ////////////////////////////////////////////////////////////
    //add your control codes here
    ////////////////////////////////////////////////////////////
    add = 0;
    sub = add + 1;
    
    //transfer a and b to modules
    adder.a = a; adder.b = b; adder.io_dip=io_dip; adder.rst = rst;
    
    //adder
    if (edge_detector3.out == 1 & (io_dip[2] == add | io_dip[2] == sub)){
        out = adder.result;
        z = adder.z;
        v = adder.v;
        n = adder.n;
        io_led[1] = adder.result[15:8];
        io_led[0] = adder.result[7:0];
        
     /////////////////////////////////////////////////////////////
     //add any new modules here, use [if (edge_detector3.out == 1 & [io_dip = control code])]
     //each module needs an output "out", "z", "v", "n"; z,v,n can just be = 0
     //i set the io_led to light up based on the result
     ////////////////////////////////////////////////////////////
      
    }
  }
    
}
